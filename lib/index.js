'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = plugin;
var path = require('path');
var glob = require('glob-all');
var manifest = require("../package.json");
var inflections = require('i')();
var model_files = glob.sync(path.join(__dirname, 'models') + '/**/*.js');

function plugin(brief) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  function modifier(briefcase) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    plugin.model_files.forEach(function (file) {
      return briefcase.loadModelDefinition(file);
    });
  }

  Object.defineProperty(modifier, 'groupNames', {
    get: function get() {
      return plugin.groupNames();
    }
  });

  Object.defineProperty(modifier, 'modelNames', {
    get: function get() {
      return plugin.modelNames();
    }
  });

  return modifier;
}

plugin.model_files = model_files;

plugin.modelNames = function () {
  return model_files.map(function (file) {
    var basename = path.basename(file).replace('.js', '');
    return inflections.classify(basename);
  });
};

plugin.groupNames = function () {
  return plugin.modelNames().map(function (name) {
    return inflections.pluralize(name).toLowerCase();
  });
};

plugin.plugin_name = manifest.name.replace(/brief-plugins-/, '');
plugin.version = manifest.version;
plugin.description = manifest.description;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFNd0IsTUFBTTtBQU45QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDMUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQzlCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ3pDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBO0FBQ2hDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUE7O0FBRTFELFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBYTtNQUFYLE9BQU8seURBQUMsRUFBRTs7QUFFOUMsV0FBUyxRQUFRLENBQUMsU0FBUyxFQUFhO1FBQVgsT0FBTyx5REFBQyxFQUFFOztBQUNyQyxVQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7YUFBSSxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDO0tBQUEsQ0FBQyxDQUFBO0dBQ3hFOztBQUVELFFBQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRTtBQUM1QyxPQUFHLEVBQUUsZUFBVTtBQUNiLGFBQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFBO0tBQzNCO0dBQ0YsQ0FBQyxDQUFBOztBQUVGLFFBQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRTtBQUM1QyxPQUFHLEVBQUUsZUFBVTtBQUNiLGFBQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFBO0tBQzNCO0dBQ0YsQ0FBQyxDQUFBOztBQUVGLFNBQU8sUUFBUSxDQUFBO0NBQ2hCOztBQUVELE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBOztBQUVoQyxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVU7QUFDNUIsU0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQzdCLFFBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxFQUFFLENBQUMsQ0FBQTtBQUNwRCxXQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7R0FDdEMsQ0FBQyxDQUFBO0NBQ0gsQ0FBQTs7QUFFRCxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVU7QUFDNUIsU0FBTyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtXQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFO0dBQUEsQ0FBQyxDQUFBO0NBQ2xGLENBQUE7O0FBRUQsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBQyxFQUFFLENBQUMsQ0FBQTtBQUMvRCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUE7QUFDakMsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciBnbG9iID0gcmVxdWlyZSgnZ2xvYi1hbGwnKVxudmFyIG1hbmlmZXN0ID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKVxudmFyIGluZmxlY3Rpb25zID0gcmVxdWlyZSgnaScpKClcbmNvbnN0IG1vZGVsX2ZpbGVzID0gZ2xvYi5zeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsJ21vZGVscycpICsgJy8qKi8qLmpzJylcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGx1Z2luKGJyaWVmLCBvcHRpb25zPXt9KXtcblx0XG4gIGZ1bmN0aW9uIG1vZGlmaWVyKGJyaWVmY2FzZSwgb3B0aW9ucz17fSl7XG4gICAgcGx1Z2luLm1vZGVsX2ZpbGVzLmZvckVhY2goZmlsZSA9PiBicmllZmNhc2UubG9hZE1vZGVsRGVmaW5pdGlvbihmaWxlKSlcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RpZmllciwgJ2dyb3VwTmFtZXMnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHBsdWdpbi5ncm91cE5hbWVzKClcbiAgICB9XG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZGlmaWVyLCAnbW9kZWxOYW1lcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gcGx1Z2luLm1vZGVsTmFtZXMoKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gbW9kaWZpZXJcbn1cblxucGx1Z2luLm1vZGVsX2ZpbGVzID0gbW9kZWxfZmlsZXNcblxucGx1Z2luLm1vZGVsTmFtZXMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gbW9kZWxfZmlsZXMubWFwKGZpbGUgPT4ge1xuICAgIGxldCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZSkucmVwbGFjZSgnLmpzJywnJylcbiAgICByZXR1cm4gaW5mbGVjdGlvbnMuY2xhc3NpZnkoYmFzZW5hbWUpXG4gIH0pXG59XG5cbnBsdWdpbi5ncm91cE5hbWVzID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHBsdWdpbi5tb2RlbE5hbWVzKCkubWFwKG5hbWUgPT4gaW5mbGVjdGlvbnMucGx1cmFsaXplKG5hbWUpLnRvTG93ZXJDYXNlKCkpXG59XG5cbnBsdWdpbi5wbHVnaW5fbmFtZSA9IG1hbmlmZXN0Lm5hbWUucmVwbGFjZSgvYnJpZWYtcGx1Z2lucy0vLCcnKVxucGx1Z2luLnZlcnNpb24gPSBtYW5pZmVzdC52ZXJzaW9uXG5wbHVnaW4uZGVzY3JpcHRpb24gPSBtYW5pZmVzdC5kZXNjcmlwdGlvblxuIl19