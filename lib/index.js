'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = plugin;
var path = require('path');
var glob = require('glob-all');
var manifest = require("../package.json");
var inflections = require('i')();

var command_files = glob.sync(path.join(__dirname, 'commands') + '/**/*.js');
var model_files = glob.sync(path.join(__dirname, 'models') + '/**/*.js');
var query_files = glob.sync(path.join(__dirname, 'queries') + '/**/*.js');
var view_files = glob.sync(path.join(__dirname, 'views') + '/**/*.js');

function plugin(brief) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  function modifier(briefcase) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    plugin.model_files.forEach(function (file) {
      return briefcase.loadModelDefinition(file);
    });
    plugin.definitions.commands.forEach(function (file) {
      return briefcase.commands.fromPath(file);
    });
    plugin.definitions.queries.forEach(function (file) {
      return briefcase.queries.fromPath(file);
    });
    plugin.definitions.views.forEach(function (file) {
      return briefcase.views.fromPath(file);
    });
  }

  Object.defineProperty(modifier, 'groupNames', {
    get: function get() {
      return plugin.groupNames();
    }
  });

  Object.defineProperty(modifier, 'modelNames', {
    get: function get() {
      return plugin.modelNames();
    }
  });

  return modifier;
}

Object.defineProperty(plugin, 'definitions', {
  get: function get() {
    return {
      models: model_files,
      commands: command_files,
      views: view_files,
      queries: query_files
    };
  }
});

plugin.model_files = model_files;

plugin.modelNames = function () {
  return model_files.map(function (file) {
    var basename = path.basename(file).replace('.js', '');
    return inflections.classify(basename);
  });
};

plugin.groupNames = function () {
  return plugin.modelNames().map(function (name) {
    return inflections.pluralize(name).toLowerCase();
  });
};

plugin.plugin_name = manifest.name.replace(/brief-plugins-/, '');
plugin.version = manifest.version;
plugin.description = manifest.description;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFVd0IsTUFBTTtBQVY5QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDMUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQzlCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ3pDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBOztBQUVoQyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFBO0FBQzdFLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUE7QUFDekUsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQTtBQUMxRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFBOztBQUV4RCxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQWE7TUFBWCxPQUFPLHlEQUFDLEVBQUU7O0FBRTlDLFdBQVMsUUFBUSxDQUFDLFNBQVMsRUFBYTtRQUFYLE9BQU8seURBQUMsRUFBRTs7QUFDckMsVUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO2FBQUksU0FBUyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQztLQUFBLENBQUMsQ0FBQTtBQUN2RSxVQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO2FBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0tBQUEsQ0FBQyxDQUFBO0FBQzlFLFVBQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7YUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7S0FBQSxDQUFDLENBQUE7QUFDNUUsVUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTthQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztLQUFBLENBQUMsQ0FBQTtHQUN6RTs7QUFFRCxRQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUU7QUFDNUMsT0FBRyxFQUFFLGVBQVU7QUFDYixhQUFPLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQTtLQUMzQjtHQUNGLENBQUMsQ0FBQTs7QUFFRixRQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUU7QUFDNUMsT0FBRyxFQUFFLGVBQVU7QUFDYixhQUFPLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQTtLQUMzQjtHQUNGLENBQUMsQ0FBQTs7QUFFRixTQUFPLFFBQVEsQ0FBQTtDQUNoQjs7QUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUU7QUFDM0MsS0FBRyxFQUFFLGVBQVU7QUFDYixXQUFPO0FBQ0wsWUFBTSxFQUFFLFdBQVc7QUFDbkIsY0FBUSxFQUFFLGFBQWE7QUFDdkIsV0FBSyxFQUFFLFVBQVU7QUFDakIsYUFBTyxFQUFFLFdBQVc7S0FDckIsQ0FBQTtHQUNGO0NBQ0YsQ0FBQyxDQUFBOztBQUVGLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBOztBQUVoQyxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVU7QUFDNUIsU0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQzdCLFFBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxFQUFFLENBQUMsQ0FBQTtBQUNwRCxXQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7R0FDdEMsQ0FBQyxDQUFBO0NBQ0gsQ0FBQTs7QUFFRCxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVU7QUFDNUIsU0FBTyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtXQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFO0dBQUEsQ0FBQyxDQUFBO0NBQ2xGLENBQUE7O0FBRUQsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBQyxFQUFFLENBQUMsQ0FBQTtBQUMvRCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUE7QUFDakMsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciBnbG9iID0gcmVxdWlyZSgnZ2xvYi1hbGwnKVxudmFyIG1hbmlmZXN0ID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKVxudmFyIGluZmxlY3Rpb25zID0gcmVxdWlyZSgnaScpKClcblxuY29uc3QgY29tbWFuZF9maWxlcyA9IGdsb2Iuc3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCdjb21tYW5kcycpICsgJy8qKi8qLmpzJylcbmNvbnN0IG1vZGVsX2ZpbGVzID0gZ2xvYi5zeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsJ21vZGVscycpICsgJy8qKi8qLmpzJylcbmNvbnN0IHF1ZXJ5X2ZpbGVzID0gZ2xvYi5zeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsJ3F1ZXJpZXMnKSArICcvKiovKi5qcycpXG5jb25zdCB2aWV3X2ZpbGVzID0gZ2xvYi5zeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsJ3ZpZXdzJykgKyAnLyoqLyouanMnKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwbHVnaW4oYnJpZWYsIG9wdGlvbnM9e30pe1xuXHRcbiAgZnVuY3Rpb24gbW9kaWZpZXIoYnJpZWZjYXNlLCBvcHRpb25zPXt9KXtcbiAgICBwbHVnaW4ubW9kZWxfZmlsZXMuZm9yRWFjaChmaWxlID0+IGJyaWVmY2FzZS5sb2FkTW9kZWxEZWZpbml0aW9uKGZpbGUpKVxuICAgIHBsdWdpbi5kZWZpbml0aW9ucy5jb21tYW5kcy5mb3JFYWNoKGZpbGUgPT4gYnJpZWZjYXNlLmNvbW1hbmRzLmZyb21QYXRoKGZpbGUpKVxuICAgIHBsdWdpbi5kZWZpbml0aW9ucy5xdWVyaWVzLmZvckVhY2goZmlsZSA9PiBicmllZmNhc2UucXVlcmllcy5mcm9tUGF0aChmaWxlKSlcbiAgICBwbHVnaW4uZGVmaW5pdGlvbnMudmlld3MuZm9yRWFjaChmaWxlID0+IGJyaWVmY2FzZS52aWV3cy5mcm9tUGF0aChmaWxlKSlcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RpZmllciwgJ2dyb3VwTmFtZXMnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHBsdWdpbi5ncm91cE5hbWVzKClcbiAgICB9XG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZGlmaWVyLCAnbW9kZWxOYW1lcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gcGx1Z2luLm1vZGVsTmFtZXMoKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gbW9kaWZpZXJcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHBsdWdpbiwgJ2RlZmluaXRpb25zJywge1xuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vZGVsczogbW9kZWxfZmlsZXMsXG4gICAgICBjb21tYW5kczogY29tbWFuZF9maWxlcyxcbiAgICAgIHZpZXdzOiB2aWV3X2ZpbGVzLFxuICAgICAgcXVlcmllczogcXVlcnlfZmlsZXNcbiAgICB9XG4gIH1cbn0pXG5cbnBsdWdpbi5tb2RlbF9maWxlcyA9IG1vZGVsX2ZpbGVzXG5cbnBsdWdpbi5tb2RlbE5hbWVzID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG1vZGVsX2ZpbGVzLm1hcChmaWxlID0+IHtcbiAgICBsZXQgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGUpLnJlcGxhY2UoJy5qcycsJycpXG4gICAgcmV0dXJuIGluZmxlY3Rpb25zLmNsYXNzaWZ5KGJhc2VuYW1lKVxuICB9KVxufVxuXG5wbHVnaW4uZ3JvdXBOYW1lcyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiBwbHVnaW4ubW9kZWxOYW1lcygpLm1hcChuYW1lID0+IGluZmxlY3Rpb25zLnBsdXJhbGl6ZShuYW1lKS50b0xvd2VyQ2FzZSgpKVxufVxuXG5wbHVnaW4ucGx1Z2luX25hbWUgPSBtYW5pZmVzdC5uYW1lLnJlcGxhY2UoL2JyaWVmLXBsdWdpbnMtLywnJylcbnBsdWdpbi52ZXJzaW9uID0gbWFuaWZlc3QudmVyc2lvblxucGx1Z2luLmRlc2NyaXB0aW9uID0gbWFuaWZlc3QuZGVzY3JpcHRpb25cbiJdfQ==